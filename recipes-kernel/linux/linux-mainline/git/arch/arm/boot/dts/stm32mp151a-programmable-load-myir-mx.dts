/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
/*
 * Copyright (C) STMicroelectronics 2022 - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc-2.h>

/* PLL output is enable when x=1, with x=p,q or r */
#define PQR(p, q, r)	(((p) & 1) | (((q) & 1) << 1) | (((r) & 1) << 2))


#include "stm32mp151.dtsi"
#include "stm32mp15xa.dtsi"
#include "stm32mp15xxac-pinctrl.dtsi"
#include "stm32mp15-m4-srm.dtsi"

/* USER CODE BEGIN includes */
#include <dt-bindings/mfd/st,stpmic1.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/leds/common.h>
/* USER CODE END includes */

/ {
	model = "Programmable Load Controller";
	compatible = "st,stm32mp151a-programmable-load-myir-mx", "st,stm32mp151";

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x20000000>;

		/* USER CODE BEGIN memory */
		/* USER CODE END memory */
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		/* USER CODE BEGIN reserved-memory */
                /**
                 * There is a fair bit of SRAM inside the SoC, most of which is dedicated to the
                 * embedded firmware (M4 core) side. These memories are provided by the MCURAM
                 * and RETRAM peripherals as follows:
                 *
                 * |---------| Size | M4 Address | A7 Address |
                 * | MCURAM1 | 128K | 0x10000000 | 0x10000000 |
                 * | MCURAM2 | 128K | 0x10020000 | 0x10020000 |
                 * | MCURAM3 |  64K | 0x10040000 | 0x10040000 |
                 * | MCURAM4 |  64K | 0x10050000 | 0x10050000 |
                 * | RETRAM  |  64K | 0x00000000 | 0x38000000 |
                 *
                 * Most of this memory is dedicated to the embedded formware: MCURAM1/2 are used
                 * for the data segment/heap, MCURAM3 contains IPC buffers. RETRAM is reserved to
                 * hold the vector table and actual .text segment of the firmware.
                 *
                 * For the A7/Linux side, MCURAM4 is used for DMA chaining buffers.
                 */
                // these refer to the same memory region, just at two different addresses
                mcuram: mcuram@30000000 {
                    compatible = "shared-dma-pool";
                    reg = <0x30000000 0x40000>;
                    no-map;
                };
                mcuram2: mcuram2@10000000 {
                    compatible = "shared-dma-pool";
                    reg = <0x10000000 0x40000>;
                    no-map;
                };

                // define vdev0 memory (in MCURAM3) for IPC
                vdev0vring0: vdev0vring0@10040000 {
                    compatible = "shared-dma-pool";
                    reg = <0x10040000 0x1000>;
                    no-map;
                };

                vdev0vring1: vdev0vring1@10041000 {
                    compatible = "shared-dma-pool";
                    reg = <0x10041000 0x1000>;
                    no-map;
                };

                vdev0buffer: vdev0buffer@10042000 {
                    compatible = "shared-dma-pool";
                    reg = <0x10042000 0x8000>;
                    no-map;
                };

                // RETRAM - 64K, used for firmware code
                retram: retram@38000000 {
                    compatible = "shared-dma-pool";
                    reg = <0x38000000 0x10000>;
                    no-map;
                };
		/* USER CODE END reserved-memory */
	};

	/* USER CODE BEGIN root */
        // taken from MYiR SoM device tree (stm32mp15xx-ya15xc-t.dtsi)
        usb_phy_tuning: usb-phy-tuning {
            st,hs-dc-level = <2>;
            st,fs-rftime-tuning;
            st,hs-rftime-reduction;
            st,hs-current-trim = <15>;
            st,hs-impedance-trim = <1>;
            st,squelch-level = <3>;
            st,hs-rx-offset = <2>;
            st,no-lsfs-sc;
        };

        /* fixed 5V rail */
        vreg_5v: vreg-5v {/*: fixedregulator@0 { */
            compatible = "regulator-fixed";
            status = "okay";
            regulator-name ="fixed-5v";
            regulator-min-microvolt = <5000000>;
            regulator-max-microvolt = <5000000>;
            regulator-boot-on;
            regulator-always-on;
        };

        /* fixed 3V3 rail (switched on SoM rail) */
        vreg_3v3: vreg-3v3 {/*: fixedregulator@1 { */
            compatible = "regulator-fixed";
            status = "okay";
            regulator-name ="fixed-3v3";
            regulator-min-microvolt = <3300000>;
            regulator-max-microvolt = <3300000>;
            regulator-boot-on;
        };

        /* 16MHz crystal dedicated for CAN controller */
        can_clk16m: can-clk16m {
            compatible = "fixed-clock";
            status = "okay";
            #clock-cells = <0>;
            clock-frequency = <16000000>;
        };
	/* USER CODE END root */

	clocks {
		/* USER CODE BEGIN clocks */
		/* USER CODE END clocks */

#ifndef CONFIG_TFABOOT
		clk_lsi: clk-lsi {
			clock-frequency = <32000>;
		};
		clk_hsi: clk-hsi {
			clock-frequency = <64000000>;
		};
		clk_csi: clk-csi {
			clock-frequency = <4000000>;
		};
		clk_lse: clk-lse {
			clock-frequency = <32768>;
		};
		clk_hse: clk-hse {
			clock-frequency = <24000000>;
			st,css;
		};
#endif	/*CONFIG_TFABOOT*/
	};

}; /*root*/

&pinctrl {
	u-boot,dm-pre-reloc;

	eth1_pins_mx: eth1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 1, AF0)>, /* ETH1_CLK */
					 <STM32_PINMUX('C', 1, AF11)>, /* ETH1_MDC */
					 <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('A', 7, AF11)>, /* ETH1_CRS_DV */
					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, AF11)>; /* ETH1_RXD1 */
			bias-disable;
		};
		pins4 {
			pinmux = <STM32_PINMUX('B', 11, AF11)>; /* ETH1_TX_EN */
		};
	};

	eth1_sleep_pins_mx: eth1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_CLK */
					 <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
					 <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_CRS_DV */
					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
					 <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_MDC */
					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
					 <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
		};
	};

	i2c2_pins_mx: i2c2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 4, AF4)>; /* I2C2_SCL */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c2_sleep_pins_mx: i2c2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 4, ANALOG)>; /* I2C2_SCL */
		};
	};

	ltdc_pins_mx: ltdc_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 9, AF14)>, /* LTDC_B0 */
					 <STM32_PINMUX('D', 10, AF14)>, /* LTDC_B3 */
					 <STM32_PINMUX('E', 6, AF14)>, /* LTDC_G1 */
					 <STM32_PINMUX('E', 13, AF14)>, /* LTDC_DE */
					 <STM32_PINMUX('E', 14, AF13)>, /* LTDC_G0 */
					 <STM32_PINMUX('E', 15, AF14)>, /* LTDC_R7 */
					 <STM32_PINMUX('G', 10, AF14)>, /* LTDC_B2 */
					 <STM32_PINMUX('G', 12, AF14)>, /* LTDC_B1 */
					 <STM32_PINMUX('H', 2, AF14)>, /* LTDC_R0 */
					 <STM32_PINMUX('H', 3, AF14)>, /* LTDC_R1 */
					 <STM32_PINMUX('H', 8, AF14)>, /* LTDC_R2 */
					 <STM32_PINMUX('H', 9, AF14)>, /* LTDC_R3 */
					 <STM32_PINMUX('H', 10, AF14)>, /* LTDC_R4 */
					 <STM32_PINMUX('H', 11, AF14)>, /* LTDC_R5 */
					 <STM32_PINMUX('H', 12, AF14)>, /* LTDC_R6 */
					 <STM32_PINMUX('H', 13, AF14)>, /* LTDC_G2 */
					 <STM32_PINMUX('H', 14, AF14)>, /* LTDC_G3 */
					 <STM32_PINMUX('H', 15, AF14)>, /* LTDC_G4 */
					 <STM32_PINMUX('I', 0, AF14)>, /* LTDC_G5 */
					 <STM32_PINMUX('I', 1, AF14)>, /* LTDC_G6 */
					 <STM32_PINMUX('I', 2, AF14)>, /* LTDC_G7 */
					 <STM32_PINMUX('I', 4, AF14)>, /* LTDC_B4 */
					 <STM32_PINMUX('I', 5, AF14)>, /* LTDC_B5 */
					 <STM32_PINMUX('I', 6, AF14)>, /* LTDC_B6 */
					 <STM32_PINMUX('I', 7, AF14)>, /* LTDC_B7 */
					 <STM32_PINMUX('I', 9, AF14)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('I', 10, AF14)>; /* LTDC_HSYNC */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 7, AF14)>; /* LTDC_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	ltdc_sleep_pins_mx: ltdc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 9, ANALOG)>, /* LTDC_B0 */
					 <STM32_PINMUX('D', 10, ANALOG)>, /* LTDC_B3 */
					 <STM32_PINMUX('E', 6, ANALOG)>, /* LTDC_G1 */
					 <STM32_PINMUX('E', 13, ANALOG)>, /* LTDC_DE */
					 <STM32_PINMUX('E', 14, ANALOG)>, /* LTDC_G0 */
					 <STM32_PINMUX('E', 15, ANALOG)>, /* LTDC_R7 */
					 <STM32_PINMUX('G', 7, ANALOG)>, /* LTDC_CLK */
					 <STM32_PINMUX('G', 10, ANALOG)>, /* LTDC_B2 */
					 <STM32_PINMUX('G', 12, ANALOG)>, /* LTDC_B1 */
					 <STM32_PINMUX('H', 2, ANALOG)>, /* LTDC_R0 */
					 <STM32_PINMUX('H', 3, ANALOG)>, /* LTDC_R1 */
					 <STM32_PINMUX('H', 8, ANALOG)>, /* LTDC_R2 */
					 <STM32_PINMUX('H', 9, ANALOG)>, /* LTDC_R3 */
					 <STM32_PINMUX('H', 10, ANALOG)>, /* LTDC_R4 */
					 <STM32_PINMUX('H', 11, ANALOG)>, /* LTDC_R5 */
					 <STM32_PINMUX('H', 12, ANALOG)>, /* LTDC_R6 */
					 <STM32_PINMUX('H', 13, ANALOG)>, /* LTDC_G2 */
					 <STM32_PINMUX('H', 14, ANALOG)>, /* LTDC_G3 */
					 <STM32_PINMUX('H', 15, ANALOG)>, /* LTDC_G4 */
					 <STM32_PINMUX('I', 0, ANALOG)>, /* LTDC_G5 */
					 <STM32_PINMUX('I', 1, ANALOG)>, /* LTDC_G6 */
					 <STM32_PINMUX('I', 2, ANALOG)>, /* LTDC_G7 */
					 <STM32_PINMUX('I', 4, ANALOG)>, /* LTDC_B4 */
					 <STM32_PINMUX('I', 5, ANALOG)>, /* LTDC_B5 */
					 <STM32_PINMUX('I', 6, ANALOG)>, /* LTDC_B6 */
					 <STM32_PINMUX('I', 7, ANALOG)>, /* LTDC_B7 */
					 <STM32_PINMUX('I', 9, ANALOG)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('I', 10, ANALOG)>; /* LTDC_HSYNC */
		};
	};

	m4_i2c1_pins_mx: m4_i2c1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 14, RSVD)>, /* I2C1_SCL */
					 <STM32_PINMUX('F', 15, RSVD)>; /* I2C1_SDA */
		};
	};

	m4_spi5_pins_mx: m4_spi5_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 11, RSVD)>, /* SPI5_MOSI */
					 <STM32_PINMUX('H', 6, RSVD)>, /* SPI5_SCK */
					 <STM32_PINMUX('H', 7, RSVD)>; /* SPI5_MISO */
		};
	};

	m4_uart5_pins_mx: m4_uart5_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 5, RSVD)>, /* UART5_RX */
					 <STM32_PINMUX('B', 13, RSVD)>; /* UART5_TX */
		};
	};

	sdmmc2_pins_mx: sdmmc2_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('A', 9, AF10)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('D', 3, AF9)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 5, AF9)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			//bias-disable;
                        bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
			// bias-disable;
                        bias-pull-up;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc2_opendrain_pins_mx: sdmmc2_opendrain_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('A', 9, AF10)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('D', 3, AF9)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 5, AF9)>; /* SDMMC2_D6 */
			//bias-disable;
                        bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
			//bias-disable;
                        bias-pull-up;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins3 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			//bias-disable;
                        bias-pull-up;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 8, ANALOG)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('A', 9, ANALOG)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('D', 3, ANALOG)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
					 <STM32_PINMUX('E', 5, ANALOG)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
		};
	};

	spi3_pins_mx: spi3_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 2, AF7)>, /* SPI3_MOSI */
					 <STM32_PINMUX('C', 10, AF6)>, /* SPI3_SCK */
					 <STM32_PINMUX('C', 11, AF6)>; /* SPI3_MISO */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi3_sleep_pins_mx: spi3_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 2, ANALOG)>, /* SPI3_MOSI */
					 <STM32_PINMUX('C', 10, ANALOG)>, /* SPI3_SCK */
					 <STM32_PINMUX('C', 11, ANALOG)>; /* SPI3_MISO */
		};
	};

	tim2_pwm_pins_mx: tim2_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 3, AF1)>; /* TIM2_CH4 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	tim2_pwm_sleep_pins_mx: tim2_pwm_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 3, ANALOG)>; /* TIM2_CH4 */
		};
	};

	tim4_pwm_pins_mx: tim4_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 7, AF2)>; /* TIM4_CH2 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	tim4_pwm_sleep_pins_mx: tim4_pwm_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 7, ANALOG)>; /* TIM4_CH2 */
		};
	};

	uart4_pins_mx: uart4_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 11, AF6)>; /* UART4_RX */
			bias-disable;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 11, ANALOG)>, /* UART4_RX */
					 <STM32_PINMUX('G', 11, ANALOG)>; /* UART4_TX */
		};
	};

	/* USER CODE BEGIN pinctrl */

	/* USER CODE END pinctrl */
};

&pinctrl_z {
	u-boot,dm-pre-reloc;

	i2c2_pins_z_mx: i2c2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('Z', 7, AF3)>; /* I2C2_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c2_sleep_pins_z_mx: i2c2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('Z', 7, ANALOG)>; /* I2C2_SDA */
		};
	};

	i2c4_pins_z_mx: i2c4_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('Z', 4, AF6)>, /* I2C4_SCL */
					 <STM32_PINMUX('Z', 5, AF6)>; /* I2C4_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c4_sleep_pins_z_mx: i2c4_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('Z', 4, ANALOG)>, /* I2C4_SCL */
					 <STM32_PINMUX('Z', 5, ANALOG)>; /* I2C4_SDA */
		};
	};

	/* USER CODE BEGIN pinctrl_z */

	/* USER CODE END pinctrl_z */
};

&m4_rproc{
	status = "okay";

	/* USER CODE BEGIN m4_rproc */
        // required memory regions: SRAMs for storing code/data; vdev buffers for IPC
        memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
                        <&vdev0vring1>, <&vdev0buffer>;
        // mailbox channels exposed by the chip
        mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
        mbox-names = "vq0", "vq1", "shutdown";

        // TODO: use appropriate constants for irq config?
        interrupt-parent = <&exti>;
        interrupts = <68 1>;
        wakeup-source;
	/* USER CODE END m4_rproc */

        // XXX: this isn't used with the non-ST distribution?
	m4_system_resources{
		status = "okay";

		/* USER CODE BEGIN m4_system_resources */
		/* USER CODE END m4_system_resources */
	};
};

&bsec{
	status = "okay";

	/* USER CODE BEGIN bsec */
	/* USER CODE END bsec */
};

// temp sensor
&dts {
    status = "okay";
};

&dma1{
	status = "okay";

	/* USER CODE BEGIN dma1 */
	/* USER CODE END dma1 */
};

// DMA2 is used by the cortex M4
&dma2{
	/* USER CODE BEGIN dma2 */
	/* USER CODE END dma2 */
};

&dmamux1{
	status = "okay";

	/* USER CODE BEGIN dmamux1 */
	/* USER CODE END dmamux1 */
};

&ethernet0{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth1_pins_mx>;
	pinctrl-1 = <&eth1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN ethernet0 */
	/* USER CODE END ethernet0 */
};

&hsem{
	status = "okay";

	/* USER CODE BEGIN hsem */
	/* USER CODE END hsem */
};

&ipcc{
	status = "okay";

	/* USER CODE BEGIN ipcc */
	/* USER CODE END ipcc */
};

// watchdog (during boot)
&iwdg2 {
    u-boot,dm-pre-reloc;
    timeout-sec = <32>;
    status = "okay";
};

&i2c2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c2_pins_mx &i2c2_pins_z_mx>;
	pinctrl-1 = <&i2c2_sleep_pins_mx &i2c2_sleep_pins_z_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c2 */
	/* USER CODE END i2c2 */
};

&i2c4{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c4_pins_z_mx>;
	pinctrl-1 = <&i2c4_sleep_pins_z_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c4 */
        i2c-scl-rising-time-ns = <185>;
        i2c-scl-falling-time-ns = <20>;
        clock-frequency = <400000>;
        secure-status = "okay";

        /delete-property/dmas;
        /delete-property/dma-names;

        /* eeprom (on MYiR SoM) */
        eeprom@50 {
            compatible = "atmel,24c32";
            reg = <0x50>;
            pagesize = <32>;
            wp-gpios = <&gpioa 14 0>;
            num-addresses = <8>;
        };

        pmic: stpmic@33 {
            compatible = "st,stpmic1";
            reg = <0x33>;

            // TODO: figure out what the proper external interrupt configuration is here
            // interrupts-extended = <&exti_pwr 55 IRQ_TYPE_EDGE_FALLING>;
            interrupts-extended = <&exti 55 IRQ_TYPE_EDGE_FALLING>;

            interrupt-controller;
            #interrupt-cells = <2>;
            status = "okay";

            watchdog {
                compatible = "st,stpmic1-wdt";
                status = "disabled";
            };

            onkey {
                compatible = "st,stpmic1-onkey";
                status = "disabled";
            };

            regulators {
                compatible = "st,stpmic1-regulators";
                buck1-supply = <&vreg_5v>;
                buck2-supply = <&vreg_5v>;
                buck3-supply = <&vreg_5v>;
                buck4-supply = <&vreg_5v>;
                ldo1-supply = <&v3v3>;
                ldo2-supply = <&vreg_5v>;
                ldo3-supply = <&vdd_ddr>;
                ldo4-supply = <&vreg_5v>;
                ldo5-supply = <&vreg_5v>;
                ldo6-supply = <&v3v3>;
                vref_ddr-supply = <&vreg_5v>;
                boost-supply = <&vreg_5v>;
                pwr_sw1-supply = <&bst_out>;
                pwr_sw2-supply = <&bst_out>;

                vddcore: buck1 {
                    regulator-name = "vddcore"; //to cpu
                    regulator-min-microvolt = <1200000>;
                    regulator-max-microvolt = <1350000>;
                    regulator-always-on;
                    regulator-initial-mode = <0>;
                    regulator-over-current-protection;
                };

                vdd_ddr: buck2 {
                    regulator-name = "vdd_ddr";//to ddr
                    regulator-min-microvolt = <1350000>;
                    regulator-max-microvolt = <1350000>;
                    regulator-always-on;
                    regulator-initial-mode = <0>;
                    regulator-over-current-protection;
                };

                vdd: buck3 {
                    regulator-name = "vdd";//to mmc
                    regulator-min-microvolt = <3300000>;
                    regulator-max-microvolt = <3300000>;
                    regulator-always-on;
                    st,mask-reset;
                    regulator-initial-mode = <0>;
                    regulator-over-current-protection;
                };

                v3v3: buck4 {
                    regulator-name = "v3v3";//to mmc
                    regulator-min-microvolt = <3300000>;
                    regulator-max-microvolt = <3300000>;
                    regulator-always-on;
                    regulator-over-current-protection;
                    regulator-initial-mode = <0>;
                };

                vdda: ldo1 {
                    regulator-name = "vdda";//to verf
                    regulator-min-microvolt = <1700000>;
                    regulator-max-microvolt = <3300000>;
                    regulator-always-on;
                };
/*
                vldo2: ldo2 {
                    regulator-name = "vldo2";
                    regulator-min-microvolt = <1700000>;
                    regulator-max-microvolt = <3300000>;
                    regulator-always-on;
                };
*/

                vtt_ddr: ldo3 {
                    regulator-name = "vtt_ddr";
                    regulator-min-microvolt = <500000>;
                    regulator-max-microvolt = <750000>;
                    regulator-always-on;
                    regulator-over-current-protection;
                };


                vdd_usb: ldo4 {
                    regulator-name = "vdd_usb";//to usb
                    regulator-min-microvolt = <3300000>;
                    regulator-max-microvolt = <3300000>;
                    regulator-always-on;
                };



                vdd_sd: ldo5 {
                    regulator-name = "vdd_sd";
                    regulator-min-microvolt = <1700000>;
                    regulator-max-microvolt = <3900000>;
                    regulator-boot-on;
                };
/*
                vldo6: ldo6 {
                    regulator-name = "vldo6";
                    regulator-min-microvolt = <900000>;
                    regulator-max-microvolt = <3300000>;
                    regulator-always-on;
                    standby-ddr-sr {
                        regulator-off-in-suspend;
                    };
                    standby-ddr-off {
                        regulator-off-in-suspend;
                    };
                };
*/
                vref_ddr: vref_ddr {
                    regulator-name = "vref_ddr";
                    regulator-always-on;
                    regulator-over-current-protection;
                };

                bst_out: boost {
                    regulator-name = "bst_out";
                };

                vbus_otg: pwr_sw1 {
                    regulator-name = "vbus_otg";
                };

                vbus_sw: pwr_sw2 {
                    regulator-name = "vbus_sw";
                    regulator-active-discharge = <1>;
                };
            };
    };
    /* USER CODE END i2c4 */
};

&ltdc{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ltdc_pins_mx>;
	pinctrl-1 = <&ltdc_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN ltdc */
        /* configure the RGB output port */
        port {
            #address-cells = <1>;
            #size-cells = <0>;

            /* XXX: Maybe it is ep0 and reg = 0 instead? */
            ltdc_ep0_out: endpoint@0 {
                reg = <0>;
                remote-endpoint = <&panel_rgb_in>;
            };
        };
	/* USER CODE END ltdc */
};

&m4_crc2{
	status = "okay";

	/* USER CODE BEGIN m4_crc2 */
	/* USER CODE END m4_crc2 */
};

&m4_dma2{
	status = "okay";

	/* USER CODE BEGIN m4_dma2 */
	/* USER CODE END m4_dma2 */
};

&m4_i2c1{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_i2c1_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_i2c1 */
	/* USER CODE END m4_i2c1 */
};

&m4_rng2{
	status = "okay";

	/* USER CODE BEGIN m4_rng2 */
	/* USER CODE END m4_rng2 */
};

&m4_spi5{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_spi5_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_spi5 */
	/* USER CODE END m4_spi5 */
};

&m4_uart5{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_uart5_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_uart5 */
	/* USER CODE END m4_uart5 */
};

&mdma1{
	status = "okay";

	/* USER CODE BEGIN mdma1 */
	/* USER CODE END mdma1 */
};

&rcc{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN rcc */
	pll2:st,pll@1 {
		compatible = "st,stm32mp1-pll";
		reg = <1>;
		cfg = < 2 65 1 1 0 PQR(1,1,1) >;
		frac = < 0x1400 >;
		u-boot,dm-pre-reloc;
                u-boot,dm-spl;
	};
	pll3:st,pll@2 {
		compatible = "st,stm32mp1-pll";
		reg = <2>;
		cfg = < 1 51 2 5 3 PQR(1,1,1) >;
		frac = < 0x800 >;
		u-boot,dm-pre-reloc;
                u-boot,dm-spl;
	};
	pll4:st,pll@3 {
		compatible = "st,stm32mp1-pll";
		reg = <3>;
		cfg = < 1 49 11 23 14 PQR(1,1,1) >;
		u-boot,dm-pre-reloc;
                u-boot,dm-spl;
	};

	/* USER CODE END rcc */
};

&crc1 {
	status = "okay";
};

&hash1 {
	status = "okay";
};

&rng1{
	status = "okay";

	/* USER CODE BEGIN rng1 */
	/* USER CODE END rng1 */
};

&rtc{
	status = "okay";

	/* USER CODE BEGIN rtc */
	/* USER CODE END rtc */
};

&sdmmc2{
    status = "okay";
    // pin config from stmcubemx
    pinctrl-names = "default", "opendrain", "sleep";
    pinctrl-0 = <&sdmmc2_pins_mx>;
    pinctrl-1 = <&sdmmc2_opendrain_pins_mx>;
    pinctrl-2 = <&sdmmc2_sleep_pins_mx>;

    /* USER CODE BEGIN sdmmc2 */
    /* define it as non-removable eMMC flash */
    non-removable;
    no-sd;
    no-sdio;
    /* polarity of clock and data bus width */
    st,neg-edge;
    bus-width = <8>;
    /* supplies */
    vmmc-supply = <&v3v3>;
    vqmmc-supply = <&vdd>;
    no-1-8-v;
    mmc-ddr-3_3v;
    /* USER CODE END sdmmc2 */
};

&spi3{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi3_pins_mx>;
	pinctrl-1 = <&spi3_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN spi3 */
	/* USER CODE END spi3 */
};

&tamp{
	status = "okay";

	/* USER CODE BEGIN tamp */
        // how we reboot is specified by a boot/tamper register
        reboot-mode {
            compatible = "syscon-reboot-mode";
            offset = <0x150>; /* reg20 */
            mask = <0xff>;
            mode-normal = <0>;
            mode-fastboot = <0x1>;
            mode-recovery = <0x2>;
            mode-stm32cubeprogrammer = <0x3>;
            mode-ums_mmc0 = <0x10>;
            mode-ums_mmc1 = <0x11>;
            mode-ums_mmc2 = <0x12>;
        };
	/* USER CODE END tamp */
};

&timers2{
	status = "okay";

	/* USER CODE BEGIN timers2 */
        /* PWM mode doesn't require DMA */
	/delete-property/dmas;
	/delete-property/dma-names;

        /* XXX: the following pwm name may not stick on regeneration (pwm2) */
	/* USER CODE END timers2 */

	pwm2: pwm{
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&tim2_pwm_pins_mx>;
		pinctrl-1 = <&tim2_pwm_sleep_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN timers2_pwm */
		/* USER CODE END timers2_pwm */
	};
};

&timers4{
	status = "okay";

	/* USER CODE BEGIN timers4 */
        /* PWM mode doesn't require DMA */
	/delete-property/dmas;
	/delete-property/dma-names;

        /* XXX: the following pwm name may not stick on regeneration (pwm4) */
	/* USER CODE END timers4 */

	pwm4: pwm{
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&tim4_pwm_pins_mx>;
		pinctrl-1 = <&tim4_pwm_sleep_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN timers4_pwm */
		/* USER CODE END timers4_pwm */
	};
};

&uart4{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins_mx>;
	pinctrl-1 = <&uart4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart4 */
	/* USER CODE END uart4 */
};

&usbh_ehci{
	status = "okay";

	/* USER CODE BEGIN usbh_ehci */
        phys = <&usbphyc_port0>;
        phy-names = "usb";
	/* USER CODE END usbh_ehci */
};

&usbh_ohci{
	status = "okay";

	// USER CODE BEGIN usbh_ohci
        phys = <&usbphyc_port0>;
        phy-names = "usb";
	// USER CODE END usbh_ohci
};

&usbotg_hs{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbotg_hs */
        // set the PHY to use
        phys = <&usbphyc_port1 0>;
        phy-names = "usb2-phy";
        /* force always into device mode */
        dr_mode = "peripheral";
        usb-role-switch;
        role-switch-default-mode = "peripheral";
	/* USER CODE END usbotg_hs */
};

&usbphyc{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbphyc */
	/* USER CODE END usbphyc */
};

&usbphyc_port0{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbphyc_port0 */
        phy-supply = <&vdd_usb>;
        st,phy-tuning = <&usb_phy_tuning>;
	/* USER CODE END usbphyc_port0 */
};

&usbphyc_port1{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbphyc_port1 */
        phy-supply = <&vdd_usb>;
        st,phy-tuning = <&usb_phy_tuning>;
	/* USER CODE END usbphyc_port1 */
};

/* USER CODE BEGIN addons */
/ {
    aliases {
        ethernet0 = &ethernet0;
        serial0 = &uart4;
    };

    // put serial console on UART4 (TTY1 on pin header)
    chosen {
        stdout-path = "serial0:115200n8";
    };

    /* magnetic transducer (beeper) on main board */
    beeper {
        compatible = "pwm-beeper";
        // Ch4 pwm out
        pwms = <&pwm2 3 800000 0>;
    };

    // front panel LCD backlight
    panel_backlight: panel-backlight {
        compatible = "pwm-backlight";
        status = "okay";
        // period (ns) and inverted (no)
        pwms = <&pwm4 1 250000 0>;

        // TODO: these need tuning, likely
        brightness-levels = <0 2 4 8 16 32 64 128 192 224 255>;
        default-brightness-level = <9>;

        power-supply = <&vreg_3v3>;
    };

    /* front LCD panel */
    front_lcd: panel {
        status = "okay";
        compatible = "eastrising,er-tft040-1", "simple-panel";
        label = "Front LCD";

        // rotate lcd
        rotation = <270>;

        /* associated backlight device (PWM driver) */
        backlight = <&panel_backlight>;

        /* reset signal on front panel GPIO expander */
        /* do not use, as we configure the controller ourselves from userspace (?) */
        /* reset-gpios = <&front_gpio 8 GPIO_ACTIVE_LOW>; */

        /* provide some always on regulators as voltage sources */
        power-supply = <&vreg_3v3>;

        /* video data source: LTDC RGB interface */
        port {
            panel_rgb_in: endpoint {
                remote_endpoint = <&ltdc_ep0_out>;
            };
        };
    };

    // front panel rotary encoder
    front-encoder@4 {
        compatible = "rotary-encoder";
        status = "okay";

        linux,axis = <0>; // REL_X

        // set up the GPIOs
        //pinctrl-names = "default";
        //pinctrl-0 = <&front_encoder_pins>;

        // specify GPIOs connected to encoder ("A" and "B" lines)
        gpios = <&gpioa 4 0>, <&gpioa 6 0>;

        // specify encoder config
        rotary-encoder,encoding = "gray"; // gray code
        rotary-encoder,steps = <24>; // steps per rotation
        rotary-encoder,steps-per-period = <1>; // full period mode
    };

    // LEDs connected to GPIOs
    statusleds {
        compatible = "gpio-leds";
        status = "okay";

        // bi-color on-board A7 status LED
        ext-status {
            // label = "Status Bicolor";
            gpios = <&gpioz 6 GPIO_ACTIVE_HIGH>;
            linux,default-trigger = "activity";
        };
        // SoM status LED
        som-status {
            // label = "SoM Status";
            gpios = <&gpioa 13 GPIO_ACTIVE_LOW>;

            // treat this LED as a heartbeat
            linux,default-trigger = "heartbeat";
        };
    };
};

/* fuse controller */
&bsec {
    /* specify the board ID fuse */
    board_id: board_id@ec {
        reg = <0xec 0x4>;
        st,non-secure-otp;
    };
};

/* enable bypass mode for external clock */
&clk_hse {
    st,digbypass;
};

/* CPU power supply (for voltage scaling (?)) */
&cpu0 {
    cpu-supply = <&vddcore>;
};


/* on-board I2C bus devices */
&i2c2 {
    /* run at 400kHz */
    clock-frequency = <400000>;

    /* define the bus mux */
    i2c2_mux: i2c-switch@70 {
        compatible = "nxp,pca9543";
        #address-cells = <1>;
        #size-cells = <0>;
        /* bus address */
        reg = <0x70>;

        /* define the mux irq: from EXTI (PD2) */
        /* TODO: is this right? */
        interrupt-parent = <&gpiod>;
        interrupts = <2 IRQ_TYPE_EDGE_FALLING>;
        interrupt-controller;
        #interrupt-cells = <2>;

        /* line connected to reset */
        reset-gpios = <&gpiof 0 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;

        // front panel bus
        i2c@0 {
            #address-cells = <1>;
            #size-cells = <0>;
            reg = <0>;

            /*
            // identification ROM (read/write part of 24CS32; behaves like regular EEPROM)
            eeprom-conf@50 {
                compatible = "atmel,24c32";
                pagesize = <16>;

                // the address specified is for the user data part
                reg = <0x50>;
                #address-cells = <1>;
                #size-cells = <1>;
            };

            // serial number ROM (read-only part of 24CS32)
            eeprom-serial@58 {
                compatible = "atmel,24cs32";
                read-only;
                pagesize = <16>;

                // the address specified is for the serial number part
                reg = <0x58>;
                #address-cells = <1>;
                #size-cells = <1>;

                // fixed system serial number
                system_serial: serno@0 {
                    reg = <0x0 0x10>;
                };
            };

            // GPIO expander
            front_gpio: gpio-expander@27 {
                compatible = "nxp,pca9535";
                gpio-controller;
                // TODO: figure out proper address
                reg = <0x27>;
                #gpio-cells = <2>;


                //pinctrl-names = "default";
                //pinctrl-0 = <&pinctrl_pca9535>;

                // name the IOs (from 0 to 15)
                gpio-line-names = "ModeCC", "InputEnable", "EncoderSw", "ModeCW",
                    "ModeCV", "ModeExt", "Menu", "LedDriverOe", "DisplayReset", "", "", "", "", "",
                    "TouchIrq", "TouchReset";

                // irq line is hooked up through mux
                // TODO: is this right?
                interrupt-parent = <&i2c_mux>;
                interrupts = <0 IRQ_TYPE_EDGE_FALLING>;
                interrupt-controller;
                #interrupt-cells = <2>;
            };

            // TODO: LED driver

            // TODO: touch panel
            */
        };

        /* on-board control bus */
        i2c@1 {
            #address-cells = <1>;
            #size-cells = <0>;
            reg = <1>;

            // configuration ROM (read/write part of 24MAC402; behaves like regular EEPROM)
            eeprom-conf@50 {
                compatible = "atmel,24c02";
                pagesize = <16>;

                // the address specified is for the user data part
                reg = <0x50>;
                #address-cells = <1>;
                #size-cells = <1>;
            };

            // MAC address ROM (read-only part of 24MAC402)
            eeprom-eui@58 {
                compatible = "atmel,24mac402";
                read-only;
                pagesize = <16>;

                // the address specified is for the serial number part
                reg = <0x58>;
                #address-cells = <1>;
                #size-cells = <1>;

                // define the MAC address
                eth0_addr: eth-mac-addr@9A {
                    reg = <0x0 0x06>;
                };
            };

            // ambient temp sensor
            ambient-temp@48 {
                compatible = "atmel,at30ts74";
                reg = <0x48>;
            };

            // TODO: fan controller
        };
    };
};

/* on-board SPI (through mux) */
&spi3{
    /* specify chip selects: 0 = PA15, 1 = PC8 */
    num-cs = <2>;
    cs-gpios = <&gpioa 15 GPIO_ACTIVE_LOW>, <&gpioc 8 GPIO_ACTIVE_LOW>;

    /* CAN controller */
    expansion-can@0 {
        // chip select 0
        reg = <0>;
        spi-max-frequency = <10000000>;

        // CAN controller
        compatible = "microchip,mcp2515";

        // define the clock (16MHz) feeding the controller
        clocks = <&can_clk16m>;

        // interrupt line (exclusive to CAN controller)
        // TODO: verify this
        interrupt-parent = <&gpioc>;
        interrupts = <12 IRQ_TYPE_EDGE_FALLING>;
    };

    /* front panel display controller */
    display-controller@1 {
        // chip select 1
        reg = <1>;
        spi-max-frequency = <5000000>;

        // this depends on our modifications to the spi driver to add the compatible string
        compatible =  "trist,pl-front-panel";
    };
};

/* configure Ethernet peripheral */
&ethernet0{
    // MAC address is stored in EEPROM
    nvmem-cells = <&eth0_addr>;
    nvmem-cell-names = "mac-address";

    // 50MHz clock output to PHY
    st,ext-phyclk;

    // define how the PHY is connected
    phy-mode = "rmii";
    max-speed = <100>;
    phy-handle = <&phy0>;

    // configure the PHY
    mdio0 {
        compatible = "snps,dwmac-mdio";
        #address-cells = <1>;
        #size-cells = <0>;

        // TODO: is this declared right?
        phy0: ethernet-phy@0 {
            // compatible = "ethernet-phy-id0007.c0f0", "ethernet-phy-ieee802.3-c22";
            compatible = "ethernet-phy-ieee802.3-c22";

            reg = <1>;

            // reset GPIPO
            reset-gpios = <&gpioc 0 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
            reset-assert-us = <5000>;
            reset-deassert-us = <10000>;

            // PHY interrupt line
            interrupt-parent = <&gpioa>;
            interrupts = <5 IRQ_TYPE_EDGE_FALLING>;
        };
    };
};

// define power regulator modes
&pwr_regulators {
    vdd-supply = <&vdd>;
    // XXX: is this for the USB PHYs?
    // vdd_3v3_usbfs-supply = <&vdd_usb>;
};


/* USER CODE END addons */

