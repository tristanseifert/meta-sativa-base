From 29433b48b606f673f2f32b59836d27c55f0b1d7b Mon Sep 17 00:00:00 2001
From: Tristan Seifert <tristan@tseifert.me>
Date: Sun, 19 Jun 2022 12:18:02 -0700
Subject: [PATCH 4/4] added board-specific sources

---
 arch/arm/mach-stm32mp/Makefile                |  1 +
 arch/arm/mach-stm32mp/cpu.c                   | 85 +++----------------
 .../arm/mach-stm32mp/include/mach/sys_proto.h |  2 -
 3 files changed, 24 insertions(+), 77 deletions(-)

diff --git a/arch/arm/mach-stm32mp/Makefile b/arch/arm/mach-stm32mp/Makefile
index 391b47cf13..618e04699e 100644
--- a/arch/arm/mach-stm32mp/Makefile
+++ b/arch/arm/mach-stm32mp/Makefile
@@ -7,6 +7,7 @@ obj-y += cpu.o
 obj-y += dram_init.o
 obj-y += syscon.o
 obj-y += bsec.o
+obj-y += conf_prom.o encoding_helpers.o hash_helpers.o
 
 ifdef CONFIG_SPL_BUILD
 obj-y += spl.o
diff --git a/arch/arm/mach-stm32mp/cpu.c b/arch/arm/mach-stm32mp/cpu.c
index 0ad5f307db..a1ad9ebadb 100644
--- a/arch/arm/mach-stm32mp/cpu.c
+++ b/arch/arm/mach-stm32mp/cpu.c
@@ -24,6 +24,8 @@
 #include <dm/uclass.h>
 #include <linux/bitops.h>
 
+#include "conf_prom.h"
+
 /* RCC register */
 #define RCC_TZCR		(STM32_RCC_BASE + 0x00)
 #define RCC_DBGCFGR		(STM32_RCC_BASE + 0x080C)
@@ -590,78 +592,6 @@ static void setup_boot_mode(void)
 	clrsetbits_le32(TAMP_BOOT_CONTEXT, TAMP_BOOT_FORCED_MASK, BOOT_NORMAL);
 }
 
-/*
- * If there is no MAC address in the environment, then it will be initialized
- * (silently) from the value in the OTP.
- */
-__weak int setup_mac_address(void)
-{
-	int ret;
-	int i;
-	u32 otp[2];
-	uchar enetaddr[6];
-	struct udevice *dev;
-
-	if (!IS_ENABLED(CONFIG_NET))
-		return 0;
-
-	/* MAC already in environment */
-	if (eth_env_get_enetaddr("ethaddr", enetaddr))
-		return 0;
-
-	ret = uclass_get_device_by_driver(UCLASS_MISC,
-					  DM_DRIVER_GET(stm32mp_bsec),
-					  &dev);
-	if (ret)
-		return ret;
-
-	ret = misc_read(dev, STM32_BSEC_SHADOW(BSEC_OTP_MAC),
-			otp, sizeof(otp));
-	if (ret < 0)
-		return ret;
-
-	for (i = 0; i < 6; i++)
-		enetaddr[i] = ((uint8_t *)&otp)[i];
-
-	if (!is_valid_ethaddr(enetaddr)) {
-		log_err("invalid MAC address in OTP %pM\n", enetaddr);
-		return -EINVAL;
-	}
-	log_debug("OTP MAC address = %pM\n", enetaddr);
-	ret = eth_env_set_enetaddr("ethaddr", enetaddr);
-	if (ret)
-		log_err("Failed to set mac address %pM from OTP: %d\n", enetaddr, ret);
-
-	return 0;
-}
-
-static int setup_serial_number(void)
-{
-	char serial_string[25];
-	u32 otp[3] = {0, 0, 0 };
-	struct udevice *dev;
-	int ret;
-
-	if (env_get("serial#"))
-		return 0;
-
-	ret = uclass_get_device_by_driver(UCLASS_MISC,
-					  DM_DRIVER_GET(stm32mp_bsec),
-					  &dev);
-	if (ret)
-		return ret;
-
-	ret = misc_read(dev, STM32_BSEC_SHADOW(BSEC_OTP_SERIAL),
-			otp, sizeof(otp));
-	if (ret < 0)
-		return ret;
-
-	sprintf(serial_string, "%08X%08X%08X", otp[0], otp[1], otp[2]);
-	env_set("serial#", serial_string);
-
-	return 0;
-}
-
 static void setup_soc_type_pkg_rev(void)
 {
 	unsigned int type, pkg, rev;
@@ -675,10 +605,17 @@ static void setup_soc_type_pkg_rev(void)
 
 int arch_misc_init(void)
 {
+    // STM32 - board stuff
 	setup_boot_mode();
-	setup_mac_address();
-	setup_serial_number();
 	setup_soc_type_pkg_rev();
 
+    // programmable load - read PROM
+    int ret = pl_read_prom();
+    if(ret) {
+        printf("failed to read PROM! (%d)\n", ret);
+    } else {
+        pl_print_prom();
+    }
+
 	return 0;
 }
diff --git a/arch/arm/mach-stm32mp/include/mach/sys_proto.h b/arch/arm/mach-stm32mp/include/mach/sys_proto.h
index b91f98eb45..003fc1e617 100644
--- a/arch/arm/mach-stm32mp/include/mach/sys_proto.h
+++ b/arch/arm/mach-stm32mp/include/mach/sys_proto.h
@@ -48,7 +48,5 @@ void get_soc_name(char name[SOC_NAME_SIZE]);
 /* return boot mode */
 u32 get_bootmode(void);
 
-int setup_mac_address(void);
-
 /* board power management : configure vddcore according OPP */
 void board_vddcore_init(u32 voltage_mv);

-- 
2.32.1 (Apple Git-133)


